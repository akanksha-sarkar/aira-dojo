# Copyright (c) Meta Platforms, Inc. and affiliates.
# All rights reserved.
#
# This source code is licensed under the license found in the
# LICENSE file in the root directory of this source tree.
#
# ROOTLESS VERSION V2 - Minimal %post section to avoid fakeroot issues

Bootstrap: docker
From: condaforge/mambaforge:latest

%labels
    Maintainer "Karen Hambardzumyan <mahnerak@meta.com>"
    Description "A rootless apptainer image for AI Agents - V2"

%environment
    # Set any permanent environment variables here
    export CONDAHOME=/opt/conda
    export PATH=$CONDAHOME/bin:$PATH
    export TQDM_DISABLE=1
    export PYTHONWARNINGS="ignore"
    # Use user-writable directories
    export SSH_DIR=$HOME/.ssh
    export OPENSSH_PREFIX=$HOME/opt/openssh

%files
    build-openssh-rootless.sh /tmp/build-openssh-rootless.sh
    entrypoint-rootless.sh /tmp/entrypoint-rootless.sh
    pip.requirements.txt /tmp/pip.requirements.txt

%post
    # Minimal post section - only essential operations
    # Most setup will be done at runtime to avoid fakeroot issues
    
    # Update conda/mamba
    /opt/conda/bin/mamba update -n base -c defaults conda mamba -y
    
    # Install only the most critical packages that require compilation
    /opt/conda/bin/mamba install -c conda-forge -y \
        make \
        cmake \
        cxx-compiler \
        gcc \
        gxx \
        binutils \
        pkg-config \
        openssl \
        zlib \
        wget \
        git \
        openssh

    # Install PyTorch + CUDA (this is the heavy lifting)
    /opt/conda/bin/mamba install -q -c pytorch -c nvidia -y \
        pytorch \
        pytorch-cuda=12.4 \
        cuda-toolkit=12.4

    # Create basic directories
    mkdir -p /inputs /outputs /workspace
    
    # Make scripts executable
    chmod +x /tmp/build-openssh-rootless.sh /tmp/entrypoint-rootless.sh

%runscript
    # Setup that requires user context happens here at runtime
    
    # First-time setup check
    if [ ! -f "$HOME/.container_initialized" ]; then
        echo "Performing first-time container setup..."
        
        # Create user directories
        mkdir -p $HOME/.ssh $HOME/opt
        
        # Install remaining packages
        /opt/conda/bin/mamba install -y xorg-libx11
        /opt/conda/bin/mamba install -c pytorch -c nvidia -c conda-forge faiss-gpu -y
        /opt/conda/bin/mamba install -c rapidsai -c conda-forge -c nvidia rapids=25.02 -y || echo "Rapids install failed, continuing..."
        /opt/conda/bin/mamba install -c conda-forge implicit implicit-proc=*=gpu -y || echo "Implicit install failed, continuing..."

        /opt/conda/bin/pip install -U pip
        /opt/conda/bin/pip install \
            jupyter \
            ipython \
            jupyterlab \
            matplotlib \
            pandas \
            scikit-learn \
            seaborn \
            transformers \
            jupyter-kernel-gateway

        # Install requirements if available
        if [ -f /tmp/pip.requirements.txt ]; then
            /opt/conda/bin/pip install -r /tmp/pip.requirements.txt || echo "Some pip packages failed to install, continuing..."
        fi

        # Build OpenSSH if script exists
        if [ -f /tmp/build-openssh-rootless.sh ]; then
            cp /tmp/build-openssh-rootless.sh $HOME/build-openssh-rootless.sh
            chmod +x $HOME/build-openssh-rootless.sh
            cd $HOME && bash $HOME/build-openssh-rootless.sh || echo "OpenSSH build failed, using system SSH"
        fi

        # Generate SSH keys
        if [ ! -f "$HOME/.ssh/id_rsa" ]; then
            ssh-keygen -t rsa -N "" -f "$HOME/.ssh/id_rsa"
            cat "$HOME/.ssh/id_rsa.pub" >> "$HOME/.ssh/authorized_keys"
            chmod 600 "$HOME/.ssh/authorized_keys"
        fi

        # Create SSH config
        cat > $HOME/.ssh/sshd_config << EOF
UsePrivilegeSeparation no
Port 17022
PidFile $HOME/.ssh/sshd.pid
AuthorizedKeysFile .ssh/authorized_keys
PasswordAuthentication no
HostKey $HOME/.ssh/id_rsa
PermitRootLogin no
StrictModes no
EOF

        # Copy entrypoint script
        if [ -f /tmp/entrypoint-rootless.sh ]; then
            cp /tmp/entrypoint-rootless.sh $HOME/entrypoint-rootless.sh
            chmod +x $HOME/entrypoint-rootless.sh
        fi

        # Mark as initialized
        touch "$HOME/.container_initialized"
        echo "Container setup complete!"
    fi
    
    # Run the entrypoint
    if [ -f "$HOME/entrypoint-rootless.sh" ]; then
        exec /bin/bash $HOME/entrypoint-rootless.sh
    else
        # Fallback SSH startup
        if [ -n "$SSH_PUBLIC_KEY" ]; then
            echo "$SSH_PUBLIC_KEY" >> $HOME/.ssh/authorized_keys
        fi
        
        # Try custom OpenSSH first, fallback to system SSH
        if [ -f "$HOME/opt/openssh/sbin/sshd" ]; then
            $HOME/opt/openssh/sbin/sshd -D -e -f $HOME/.ssh/sshd_config
        else
            /usr/sbin/sshd -D -e -f $HOME/.ssh/sshd_config
        fi
    fi

